// <auto-generated>
// This file is automatically generated from a T4 text template (Linker.DefineFunction.tt)
// when building the project.
// Do not modify it directly.
// </auto-generated>

#nullable enable

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;


namespace Wasmtime
{
    public partial class Linker
    {
        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction(string module, string name, AsyncAction callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(Array.Empty<Type>(), default(Type), allowCaller: false, allowTuple: false);

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            );

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T>(string module, string name, AsyncAction<T?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T), }, default(Type), allowCaller: false, allowTuple: false);
            var convT = ValueBox.Converter<T>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT.Unbox(store, args[0].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2>(string module, string name, AsyncAction<T1?, T2?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3>(string module, string name, AsyncAction<T1?, T2?, T3?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?, T5?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?, T5?, T6?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()),
                            convT9.Unbox(store, args[8].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()),
                            convT9.Unbox(store, args[8].ToValueBox()),
                            convT10.Unbox(store, args[9].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()),
                            convT9.Unbox(store, args[8].ToValueBox()),
                            convT10.Unbox(store, args[9].ToValueBox()),
                            convT11.Unbox(store, args[10].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(string module, string name, AsyncAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()),
                            convT9.Unbox(store, args[8].ToValueBox()),
                            convT10.Unbox(store, args[9].ToValueBox()),
                            convT11.Unbox(store, args[10].ToValueBox()),
                            convT12.Unbox(store, args[11].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction(string module, string name, AsyncCallerAction callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), }, default(Type), allowCaller: true, allowTuple: false);

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller);

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T>(string module, string name, AsyncCallerAction<T?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T), }, default(Type), allowCaller: true, allowTuple: false);
            var convT = ValueBox.Converter<T>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT.Unbox(store, args[0].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2>(string module, string name, AsyncCallerAction<T1?, T2?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3>(string module, string name, AsyncCallerAction<T1?, T2?, T3?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?, T5?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?, T5?, T6?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()),
                            convT9.Unbox(store, args[8].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()),
                            convT9.Unbox(store, args[8].ToValueBox()),
                            convT10.Unbox(store, args[9].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()),
                            convT9.Unbox(store, args[8].ToValueBox()),
                            convT10.Unbox(store, args[9].ToValueBox()),
                            convT11.Unbox(store, args[10].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

        /// <summary>
        /// Defines a function in the linker.
        /// </summary>
        /// <remarks>Functions defined with this method are store-independent.</remarks>
        /// <param name="module">The module name of the function.</param>
        /// <param name="name">The name of the function.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public void DefineAsyncFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(string module, string name, AsyncCallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?> callback)
        {
            if (module is null)
            {
                throw new ArgumentNullException(nameof(module));
            }

            if (name is null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = Function.GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();

            unsafe
            {
                AsyncFunction.Native.WasmtimeFuncAsyncCallback func = (IntPtr env, IntPtr callerPtr, Value* args, nuint nargs, Value* results, nuint nresults, out IntPtr trap_ret, out wasmtime_async_continuation_t continuation_ret) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var task = callback(
                            caller,
                            convT1.Unbox(store, args[0].ToValueBox()),
                            convT2.Unbox(store, args[1].ToValueBox()),
                            convT3.Unbox(store, args[2].ToValueBox()),
                            convT4.Unbox(store, args[3].ToValueBox()),
                            convT5.Unbox(store, args[4].ToValueBox()),
                            convT6.Unbox(store, args[5].ToValueBox()),
                            convT7.Unbox(store, args[6].ToValueBox()),
                            convT8.Unbox(store, args[7].ToValueBox()),
                            convT9.Unbox(store, args[8].ToValueBox()),
                            convT10.Unbox(store, args[9].ToValueBox()),
                            convT11.Unbox(store, args[10].ToValueBox()),
                            convT12.Unbox(store, args[11].ToValueBox()));

                        
                        trap_ret = IntPtr.Zero;
                        continuation_ret = wasmtime_async_continuation_t.FromTask(task);
                    }
                    catch (Exception ex)
                    {
                        continuation_ret = wasmtime_async_continuation_t.ImmediateCompletion;
                        trap_ret = Function.HandleCallbackException(ex);
                    }
                };

                const int StackallocThreshold = 256;

                byte[]? moduleBytesBuffer = null;
                var moduleLength = Encoding.UTF8.GetByteCount(module);
                Span<byte> moduleBytes = moduleLength <= StackallocThreshold ? stackalloc byte[moduleLength] : (moduleBytesBuffer = ArrayPool<byte>.Shared.Rent(moduleLength)).AsSpan()[..moduleLength];
                Encoding.UTF8.GetBytes(module, moduleBytes);

                byte[]? nameBytesBuffer = null;
                var nameLength = Encoding.UTF8.GetByteCount(name);
                Span<byte> nameBytes = nameLength <= StackallocThreshold ? stackalloc byte[nameLength] : (nameBytesBuffer = ArrayPool<byte>.Shared.Rent(nameLength)).AsSpan()[..nameLength];
                Encoding.UTF8.GetBytes(name, nameBytes);

                var funcType = Function.CreateFunctionType(parameterKinds, resultKinds);
                try
                {
                    fixed (byte* modulePtr = moduleBytes, namePtr = nameBytes)
                    {
                        var error = Native.wasmtime_linker_define_async_func(
                            handle,
                            modulePtr, (nuint)moduleBytes.Length,
                            namePtr, (nuint)nameBytes.Length,
                            funcType,
                            func,
                            GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                            Function.Finalizer
                        );

                        if (error != IntPtr.Zero)
                        {
                            throw WasmtimeException.FromOwnedError(error);
                        }
                    }
                }
                finally
                {
                    Function.Native.wasm_functype_delete(funcType);

                    if (moduleBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(moduleBytesBuffer);
                    }
                    if (nameBytesBuffer is not null)
                    {
                        ArrayPool<byte>.Shared.Return(nameBytesBuffer);
                    }
                }
            }
        }

    }
}

