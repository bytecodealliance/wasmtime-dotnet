// <auto-generated>
// This file is automatically generated from a T4 text template (Function.FromCallback.tt)
// when building the project.
// Do not modify it directly.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Wasmtime
{
    public partial class Function
    {
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback(IStore store, Action callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }


            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            );

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T>(IStore store, Action<T> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT.Unbox(caller, args[0].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2>(IStore store, Action<T1, T2> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3>(IStore store, Action<T1, T2, T3> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4>(IStore store, Action<T1, T2, T3, T4> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5>(IStore store, Action<T1, T2, T3, T4, T5> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6>(IStore store, Action<T1, T2, T3, T4, T5, T6> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7>(IStore store, Action<T1, T2, T3, T4, T5, T6, T7> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8>(IStore store, Action<T1, T2, T3, T4, T5, T6, T7, T8> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IStore store, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IStore store, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IStore store, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IStore store, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult>(IStore store, Func<TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            );

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult>(IStore store, Func<T, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT.Unbox(caller, args[0].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult>(IStore store, Func<T1, T2, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult>(IStore store, Func<T1, T2, T3, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult>(IStore store, Func<T1, T2, T3, T4, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult>(IStore store, Func<T1, T2, T3, T4, T5, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult>(IStore store, Func<T1, T2, T3, T4, T5, T6, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2>(IStore store, Func<ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            );

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2>(IStore store, Func<T, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT.Unbox(caller, args[0].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2>(IStore store, Func<T1, T2, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2>(IStore store, Func<T1, T2, T3, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, T5, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, T5, T6, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2, TResult3>(IStore store, Func<ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            );

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2, TResult3>(IStore store, Func<T, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT.Unbox(caller, args[0].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, T5, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, T5, T6, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2, TResult3>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2, TResult3, TResult4>(IStore store, Func<ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            );

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT.Unbox(caller, args[0].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, T5, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, T5, T6, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: false, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback(IStore store, Action<Caller> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }


            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller);

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T>(IStore store, Action<Caller, T> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT.Unbox(caller, args[0].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2>(IStore store, Action<Caller, T1, T2> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3>(IStore store, Action<Caller, T1, T2, T3> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4>(IStore store, Action<Caller, T1, T2, T3, T4> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5>(IStore store, Action<Caller, T1, T2, T3, T4, T5> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6>(IStore store, Action<Caller, T1, T2, T3, T4, T5, T6> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7>(IStore store, Action<Caller, T1, T2, T3, T4, T5, T6, T7> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8>(IStore store, Action<Caller, T1, T2, T3, T4, T5, T6, T7, T8> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IStore store, Action<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IStore store, Action<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IStore store, Action<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IStore store, Action<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = default(Type);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult>(IStore store, Func<Caller, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller);

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult>(IStore store, Func<Caller, T, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT.Unbox(caller, args[0].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult>(IStore store, Func<Caller, T1, T2, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult>(IStore store, Func<Caller, T1, T2, T3, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, T5, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = typeof(TResult);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: false, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();
            var convTResult = ValueBox.Converter<TResult>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult.Box(result));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2>(IStore store, Func<Caller, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller);

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2>(IStore store, Func<Caller, T, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT.Unbox(caller, args[0].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, T5, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2, TResult3>(IStore store, Func<Caller, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller);

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT.Unbox(caller, args[0].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, T5, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2, TResult3>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller);

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT = ValueBox.Converter<T>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT.Unbox(caller, args[0].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, T5, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2, TResult3, TResult4>(IStore store, Func<Caller, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var parameterKinds = new List<ValueKind>();
            var resultKinds = new List<ValueKind>();

            var callbackParameterTypes = new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), };
            var callbackReturnType = typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>);

            using var funcType = Function.GetFunctionType(callbackParameterTypes, callbackReturnType, parameterKinds, resultKinds, allowCaller: true, allowTuple: true, out _, out _);

            if (funcType is null)
            {
                // This means a parameter/result type combination was used that cannot
                // be represented with the current generic parameters. Therefore, fall
                // back to using reflection.
                return FromCallback(store, (Delegate)callback);
            }

            var convT1 = ValueBox.Converter<T1>();
            var convT2 = ValueBox.Converter<T2>();
            var convT3 = ValueBox.Converter<T3>();
            var convT4 = ValueBox.Converter<T4>();
            var convT5 = ValueBox.Converter<T5>();
            var convT6 = ValueBox.Converter<T6>();
            var convT7 = ValueBox.Converter<T7>();
            var convT8 = ValueBox.Converter<T8>();
            var convT9 = ValueBox.Converter<T9>();
            var convT10 = ValueBox.Converter<T10>();
            var convT11 = ValueBox.Converter<T11>();
            var convT12 = ValueBox.Converter<T12>();
            var convTResult1 = ValueBox.Converter<TResult1>();
            var convTResult2 = ValueBox.Converter<TResult2>();
            var convTResult3 = ValueBox.Converter<TResult3>();
            var convTResult4 = ValueBox.Converter<TResult4>();

            unsafe
            {
                Function.Native.WasmtimeFuncCallback func = (env, callerPtr, args, nargs, results, nresults) =>
                {
                    using var caller = new Caller(callerPtr);

                    try
                    {
                        var result = callback(
                            caller,
                            convT1.Unbox(caller, args[0].ToValueBox()),
                            convT2.Unbox(caller, args[1].ToValueBox()),
                            convT3.Unbox(caller, args[2].ToValueBox()),
                            convT4.Unbox(caller, args[3].ToValueBox()),
                            convT5.Unbox(caller, args[4].ToValueBox()),
                            convT6.Unbox(caller, args[5].ToValueBox()),
                            convT7.Unbox(caller, args[6].ToValueBox()),
                            convT8.Unbox(caller, args[7].ToValueBox()),
                            convT9.Unbox(caller, args[8].ToValueBox()),
                            convT10.Unbox(caller, args[9].ToValueBox()),
                            convT11.Unbox(caller, args[10].ToValueBox()),
                            convT12.Unbox(caller, args[11].ToValueBox()));

                        results[0] = Value.FromValueBox(convTResult1.Box(result.Item1));
                        results[1] = Value.FromValueBox(convTResult2.Box(result.Item2));
                        results[2] = Value.FromValueBox(convTResult3.Box(result.Item3));
                        results[3] = Value.FromValueBox(convTResult4.Box(result.Item4));
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                Native.wasmtime_func_new(
                    store.Context.handle,
                    funcType,
                    func,
                    GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                    Finalizer,
                    out var externFunc
                );

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
    }
}