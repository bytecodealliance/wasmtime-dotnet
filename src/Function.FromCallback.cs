// <auto-generated>
// This file is automatically generated from a T4 text template (Function.FromCallback.tt)
// when building the project.
// Do not modify it directly.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Wasmtime
{
    public partial class Function
    {
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback(Store store, Action callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(Array.Empty<Type>(), default(Type), allowCaller: false, allowTuple: false);

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            );

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T>(Store store, Action<T?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T), }, default(Type), allowCaller: false, allowTuple: false);
            var convT = ValueRaw.Converter<T>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2>(Store store, Action<T1?, T2?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3>(Store store, Action<T1?, T2?, T3?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4>(Store store, Action<T1?, T2?, T3?, T4?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5>(Store store, Action<T1?, T2?, T3?, T4?, T5?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6>(Store store, Action<T1?, T2?, T3?, T4?, T5?, T6?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7>(Store store, Action<T1?, T2?, T3?, T4?, T5?, T6?, T7?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8>(Store store, Action<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Store store, Action<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Store store, Action<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Store store, Action<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Store store, Action<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, default(Type), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult>(Store store, Func<TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(Array.Empty<Type>(), typeof(TResult), allowCaller: false, allowTuple: false);
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            );

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult>(Store store, Func<T?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT = ValueRaw.Converter<T>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult>(Store store, Func<T1?, T2?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult>(Store store, Func<T1?, T2?, T3?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult>(Store store, Func<T1?, T2?, T3?, T4?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult>(Store store, Func<T1?, T2?, T3?, T4?, T5?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, typeof(TResult), allowCaller: false, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2>(Store store, Func<ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(Array.Empty<Type>(), typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            );

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2>(Store store, Func<T?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT = ValueRaw.Converter<T>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2>(Store store, Func<T1?, T2?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, T5?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2, TResult3>(Store store, Func<ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(Array.Empty<Type>(), typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            );

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2, TResult3>(Store store, Func<T?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT = ValueRaw.Converter<T>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, T5?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2, TResult3>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2, TResult3, TResult4>(Store store, Func<ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(Array.Empty<Type>(), typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            );

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT = ValueRaw.Converter<T>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, T5?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2, TResult3, TResult4>(Store store, Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: false, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var storeContext = store.Context;
                        var result = callback(
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback(Store store, CallerAction callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), }, default(Type), allowCaller: true, allowTuple: false);

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller);

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T>(Store store, CallerAction<T?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T), }, default(Type), allowCaller: true, allowTuple: false);
            var convT = ValueRaw.Converter<T>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2>(Store store, CallerAction<T1?, T2?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3>(Store store, CallerAction<T1?, T2?, T3?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4>(Store store, CallerAction<T1?, T2?, T3?, T4?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5>(Store store, CallerAction<T1?, T2?, T3?, T4?, T5?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6>(Store store, CallerAction<T1?, T2?, T3?, T4?, T5?, T6?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7>(Store store, CallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8>(Store store, CallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Store store, CallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Store store, CallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Store store, CallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Store store, CallerAction<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, default(Type), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult>(Store store, CallerFunc<TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller);

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult>(Store store, CallerFunc<T?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT = ValueRaw.Converter<T>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult>(Store store, CallerFunc<T1?, T2?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult>(Store store, CallerFunc<T1?, T2?, T3?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?, TResult> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, typeof(TResult), allowCaller: true, allowTuple: false);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();
            var convTResult = ValueRaw.Converter<TResult>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        convTResult.Box(storeContext, store, ref args_and_results[0], result);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2>(Store store, CallerFunc<ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller);

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2>(Store store, CallerFunc<T?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT = ValueRaw.Converter<T>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?, ValueTuple<TResult1, TResult2>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, typeof(ValueTuple<TResult1, TResult2>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2, TResult3>(Store store, CallerFunc<ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller);

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2, TResult3>(Store store, CallerFunc<T?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT = ValueRaw.Converter<T>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2, TResult3>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?, ValueTuple<TResult1, TResult2, TResult3>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, typeof(ValueTuple<TResult1, TResult2, TResult3>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller);

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT = ValueRaw.Converter<T>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT.Unbox(storeContext, store, args_and_results[0]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
        /// <summary>
        /// Creates a function given a callback.
        /// </summary>
        /// <param name="store">The store to create the function in.</param>
        /// <param name="callback">The callback for when the function is invoked.</param>
        public static Function FromCallback<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult1, TResult2, TResult3, TResult4>(Store store, CallerFunc<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?, T10?, T11?, T12?, ValueTuple<TResult1, TResult2, TResult3, TResult4>> callback)
        {
            if (store is null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            if (callback is null)
            {
                throw new ArgumentNullException(nameof(callback));
            }

            var (parameterKinds, resultKinds) = GetFunctionType(new Type[] { typeof(Caller), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), }, typeof(ValueTuple<TResult1, TResult2, TResult3, TResult4>), allowCaller: true, allowTuple: true);
            var convT1 = ValueRaw.Converter<T1>();
            var convT2 = ValueRaw.Converter<T2>();
            var convT3 = ValueRaw.Converter<T3>();
            var convT4 = ValueRaw.Converter<T4>();
            var convT5 = ValueRaw.Converter<T5>();
            var convT6 = ValueRaw.Converter<T6>();
            var convT7 = ValueRaw.Converter<T7>();
            var convT8 = ValueRaw.Converter<T8>();
            var convT9 = ValueRaw.Converter<T9>();
            var convT10 = ValueRaw.Converter<T10>();
            var convT11 = ValueRaw.Converter<T11>();
            var convT12 = ValueRaw.Converter<T12>();
            var convTResult1 = ValueRaw.Converter<TResult1>();
            var convTResult2 = ValueRaw.Converter<TResult2>();
            var convTResult3 = ValueRaw.Converter<TResult3>();
            var convTResult4 = ValueRaw.Converter<TResult4>();

            unsafe
            {
                Native.WasmtimeFuncUncheckedCallback func = (env, callerPtr, args_and_results, num_args_and_results) =>
                {
                    try
                    {
                        var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;

                        var result = callback(
                            caller,
                            convT1.Unbox(storeContext, store, args_and_results[0]),
                            convT2.Unbox(storeContext, store, args_and_results[1]),
                            convT3.Unbox(storeContext, store, args_and_results[2]),
                            convT4.Unbox(storeContext, store, args_and_results[3]),
                            convT5.Unbox(storeContext, store, args_and_results[4]),
                            convT6.Unbox(storeContext, store, args_and_results[5]),
                            convT7.Unbox(storeContext, store, args_and_results[6]),
                            convT8.Unbox(storeContext, store, args_and_results[7]),
                            convT9.Unbox(storeContext, store, args_and_results[8]),
                            convT10.Unbox(storeContext, store, args_and_results[9]),
                            convT11.Unbox(storeContext, store, args_and_results[10]),
                            convT12.Unbox(storeContext, store, args_and_results[11]));

                        convTResult1.Box(storeContext, store, ref args_and_results[0], result.Item1);
                        convTResult2.Box(storeContext, store, ref args_and_results[1], result.Item2);
                        convTResult3.Box(storeContext, store, ref args_and_results[2], result.Item3);
                        convTResult4.Box(storeContext, store, ref args_and_results[3], result.Item4);
                        
                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
                };

                var funcType = CreateFunctionType(parameterKinds, resultKinds);
                ExternFunc externFunc;
                try
                {
                    Native.wasmtime_func_new_unchecked(
                        store.Context.handle,
                        funcType,
                        func,
                        GCHandle.ToIntPtr(GCHandle.Alloc(func)),
                        Finalizer,
                        out externFunc
                    );
                }
                finally
                {
                    Native.wasm_functype_delete(funcType);
                }

                GC.KeepAlive(store);

                return new Function(store, externFunc, parameterKinds, resultKinds);
            }
        }
    }
}