<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" encoding="us-ascii" #>
<#@ include file="FunctionCallbackOverloadTemplates.t4" once="true" #>
<#
// Note: We specify ASCII as output encoding above to prevent different UTF-8 BOM behavior with VS and dotnet-t4.
#>
// <auto-generated>
// This file is automatically generated from a T4 text template (Function.Wrap.tt)
// when building the project.
// Do not modify it directly.
// </auto-generated>

#nullable enable

using System;

namespace Wasmtime
{
    public partial class Function
    {
<#
// Generate overloads of WrapAction/WrapFunc for up to 16 parameters and up to one return type
// (2 * 17 overloads).
// Note: We only use up to one return type parameter here, because unlike e.g.
// Function.FromCallback() which explicitely declares ValueTuple<...> overloads, here we
// expect that the single return type parameter is implicitely used as ValueTuple<...> for
// the return type factory.
foreach (var (_, returnTypeCount, parameterCount, methodGenerics, delegateType, callbackParameterTypeExpressions, callbackReturnTypeExpression, parameterConverters, _) in EnumerateTypeCombinations(16, 1, canHaveCaller: false, delegateInputsNullable: false))
{
#>
        /// <summary>
        /// Attempt to wrap this function as <#= returnTypeCount > 0 ? "a <c>Func</c>" : "an <c>Action</c>" #>. Wrapped <c><#= returnTypeCount > 0 ? "Func" : "Action" #></c> is faster than a normal Invoke call.
        /// </summary>
        /// <returns>A <c><#= returnTypeCount > 0 ? "Func" : "Action" #></c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        public <#= delegateType #>? Wrap<#= returnTypeCount > 0 ? "Func" : "Action" #><#= methodGenerics #>()
        {
            if (store is null || IsNull)
            {
                throw new InvalidOperationException("Cannot wrap a null function reference.");
            }

            // Check that the requested type signature is compatible
            <# if (callbackParameterTypeExpressions.Length == 0) { #>
var parameterTypes = Array.Empty<Type>();
            <# } else { #>
var parameterTypes = new Type[] { <#= callbackParameterTypeExpressions #>};
            <# } #>

            if (!CheckTypeSignature(<#= callbackReturnTypeExpression #>, parameterTypes))
            {
                return null;
            }

            // Fetch a converter for each parameter type to box it
<#= parameterConverters #>
<#
    if (returnTypeCount > 0)
    { 
#>
            // Create a factory for the return type
            var factory = IReturnTypeFactory<TResult>.Create();

<# 
    } 
#>
            return (<#
    for (int x = 0; x < parameterCount; x++)
    {
        if (x >= 1)
        {
            #>, <#
        }

        #>p<#= x.ToString(CultureInfo.InvariantCulture) #><#

    }
#>) =>
            {
                // Allocate space for both the arguments and the results.
                Span<ValueRaw> argsAndResults = stackalloc ValueRaw[Math.Max(<#= parameterCount.ToString(CultureInfo.InvariantCulture) #>, Results.Count)];
                var storeContext = store.Context;

<#
    for (int x = 0; x < parameterCount; x++)
    {
        string xStr = x.ToString(CultureInfo.InvariantCulture);
#>
                convT<#= parameterCount is 1 ? "" : (x + 1).ToString(CultureInfo.InvariantCulture) #>.Box(storeContext, store, ref argsAndResults[<#= xStr #>], p<#= xStr #>);
<#
    }

    if (returnTypeCount > 0)
    {
#>

                return InvokeWithReturn(argsAndResults, factory, storeContext);
<#
    }
    else
    {
#>

                InvokeWithoutReturn(argsAndResults, storeContext);
<#
    }
#>
            };
        }

<#
}
#>
    }
}