<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.1;netstandard2.0;net8.0</TargetFrameworks>
    <LangVersion>10</LangVersion>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <Nullable>enable</Nullable>
    <WarningsAsErrors>nullable</WarningsAsErrors>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup>
    <AssemblyName>Wasmtime.Dotnet</AssemblyName>
    <PackageId>Wasmtime</PackageId>
    <Version>$(WasmtimePackageVersion)</Version>
    <Authors>Peter Huene</Authors>
    <Owners>Peter Huene</Owners>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <RepositoryUrl>https://github.com/bytecodealliance/wasmtime-dotnet</RepositoryUrl>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <PackageReleaseNotes>Update Wasmtime to 19.0.1.</PackageReleaseNotes>
    <Summary>A .NET API for Wasmtime, a standalone WebAssembly runtime</Summary>
    <PackageTags>webassembly, .net, wasm, wasmtime</PackageTags>
    <Title>Wasmtime</Title>
    <PackageDescription>
A .NET embedding of Wasmtime.

Wasmtime is a standalone runtime for WebAssembly, using the Cranelift JIT compiler.

The .NET embedding of Wasmtime enables .NET code to instantiate WebAssembly modules and to interact with them in-process.
    </PackageDescription>
    <PackageLicenseExpression>Apache-2.0 WITH LLVM-exception</PackageLicenseExpression>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <EnablePackageValidation>true</EnablePackageValidation>
    <ContinuousIntegrationBuild Condition="'$(DevBuild)'=='false'">true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All" />
    <PackageReference Include="System.Memory" Version="4.5.5" Condition="'$(TargetFramework)' == 'netstandard2.0'" />
    <PackageReference Include="IndexRange" Version="1.0.2" Condition="'$(TargetFramework)' == 'netstandard2.0'" />
  </ItemGroup>

  <ItemGroup>
    <None Include="README.md" Pack="true" PackagePath="\" />
  </ItemGroup>
  
  <ItemGroup>
    <None Update="Function.FromCallback.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Function.FromCallback.cs</LastGenOutput>
    </None>
    <None Update="Function.Wrap.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Function.Wrap.cs</LastGenOutput>
    </None>
    <None Update="Linker.DefineFunction.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Linker.DefineFunction.cs</LastGenOutput>
    </None>
    <Compile Update="Function.FromCallback.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Function.FromCallback.tt</DependentUpon>
    </Compile>
    <Compile Update="Function.Wrap.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Function.Wrap.tt</DependentUpon>
    </Compile>
    <Compile Update="Linker.DefineFunction.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Linker.DefineFunction.tt</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <Target Name="RunCodeTemplates" BeforeTargets="DispatchToInnerBuilds">
    <!-- Generate the code files from the T4 text templates.
         We use the "DispatchToInnerBuilds" target so that they are only run once when
         building the project, instead of for each target framework. -->
    <Exec Command="dotnet tool restore" />
    <Exec Command="dotnet tool run t4 Linker.DefineFunction.tt" />
    <Exec Command="dotnet tool run t4 Function.FromCallback.tt" />
    <Exec Command="dotnet tool run t4 Function.Wrap.tt" />
  </Target>

  <PropertyGroup>
    <BaseURL>https://github.com/bytecodealliance/wasmtime/releases/download</BaseURL>
    <ReleaseURLBase Condition="'$(DevBuild)'=='true'">$(BaseURL)/dev</ReleaseURLBase>
    <ReleaseURLBase Condition="'$(ReleaseURLBase)'==''">$(BaseURL)/v$(WasmtimeVersion)</ReleaseURLBase>
    <ReleaseFileNameBase Condition="'$(DevBuild)'=='true'">wasmtime-dev</ReleaseFileNameBase>
    <ReleaseFileNameBase Condition="'$(ReleaseFileNameBase)'==''">wasmtime-v$(WasmtimeVersion)</ReleaseFileNameBase>
    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>Utils\wasmtime.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <ItemGroup>
    <Wasmtime Include="linux-x86_64">
      <Copy Condition="$([MSBuild]::IsOsPlatform('Linux')) And '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)'=='X64'">true</Copy>
      <OS>linux</OS>
      <Arch>x86_64</Arch>
      <RID>linux-x64</RID>
      <FileExtension>tar.xz</FileExtension>
      <LibraryFilename>libwasmtime.so</LibraryFilename>
    </Wasmtime>

    <Wasmtime Include="linux-aarch64">
      <Copy Condition="$([MSBuild]::IsOsPlatform('Linux')) And '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)'=='Arm64'">true</Copy>
      <OS>linux</OS>
      <Arch>aarch64</Arch>
      <RID>linux-arm64</RID>
      <FileExtension>tar.xz</FileExtension>
      <LibraryFilename>libwasmtime.so</LibraryFilename>
    </Wasmtime>

    <Wasmtime Include="macos-x86_64">
      <Copy Condition="$([MSBuild]::IsOsPlatform('OSX')) And '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)'=='X64'">true</Copy>
      <OS>macos</OS>
      <Arch>x86_64</Arch>
      <RID>osx-x64</RID>
      <FileExtension>tar.xz</FileExtension>
      <LibraryFilename>libwasmtime.dylib</LibraryFilename>
    </Wasmtime>

    <Wasmtime Include="macos-aarch64">
      <Copy Condition="$([MSBuild]::IsOsPlatform('OSX')) And '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)'=='Arm64'">true</Copy>
      <OS>macos</OS>
      <Arch>aarch64</Arch>
      <RID>osx-arm64</RID>
      <FileExtension>tar.xz</FileExtension>
      <LibraryFilename>libwasmtime.dylib</LibraryFilename>
    </Wasmtime>

    <Wasmtime Include="windows-x86_64">
      <Copy Condition="$([MSBuild]::IsOsPlatform('Windows')) And '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)'=='X64'">true</Copy>
      <OS>windows</OS>
      <Arch>x86_64</Arch>
      <RID>win-x64</RID>
      <FileExtension>zip</FileExtension>
      <LibraryFilename>wasmtime.dll</LibraryFilename>
    </Wasmtime>
  </ItemGroup>

  <!-- This target downloads wasmtime and runs before any inner TFM-specific builds -->
  <Target Name="DownloadWasmtime" BeforeTargets="DispatchToInnerBuilds">
    <DownloadFile
      Condition="('$(Packing)'=='true' Or '%(Wasmtime.Copy)'=='true') And !Exists('$(BaseIntermediateOutputPath)/$(ReleaseFileNameBase)-%(Wasmtime.Arch)-%(Wasmtime.OS)-c-api.%(Wasmtime.FileExtension)')"
      SourceUrl="$(ReleaseURLBase)/$(ReleaseFileNameBase)-%(Wasmtime.Arch)-%(Wasmtime.OS)-c-api.%(Wasmtime.FileExtension)"
      DestinationFolder="$(BaseIntermediateOutputPath)"
      SkipUnchangedFiles="true"
    />

    <!-- Workaround for https://github.com/msys2/MSYS2-packages/issues/1548 -->
    <Exec
      Condition="('$(Packing)'=='true' Or '%(Wasmtime.Copy)'=='true') And %(Wasmtime.FileExtension) == 'tar.xz' And !Exists('$(BaseIntermediateOutputPath)$(ReleaseFileNameBase)-%(Wasmtime.Arch)-%(Wasmtime.OS)-c-api')"
      Command="xz --decompress --stdout $(ReleaseFileNameBase)-%(Wasmtime.Arch)-%(Wasmtime.OS)-c-api.%(Wasmtime.FileExtension) | tar xf -"
      WorkingDirectory="$(BaseIntermediateOutputPath)"
      StandardOutputImportance="Low"
      StandardErrorImportance="Low"
    />
    <Unzip
      Condition="('$(Packing)'=='true' Or '%(Wasmtime.Copy)'=='true') And %(Wasmtime.FileExtension) == 'zip' And !Exists('$(BaseIntermediateOutputPath)$(ReleaseFileNameBase)-%(Wasmtime.Arch)-%(Wasmtime.OS)-c-api')"
      SourceFiles="$(BaseIntermediateOutputPath)\$(ReleaseFileNameBase)-%(Wasmtime.Arch)-%(Wasmtime.OS)-c-api.%(Wasmtime.FileExtension)"
      DestinationFolder="$(BaseIntermediateOutputPath)"
    />

    <!-- The content here is specifically for packing -->
    <ItemGroup Condition="'$(Packing)'=='true'">
      <Content Include="$(BaseIntermediateOutputPath)$(ReleaseFileNameBase)-%(Wasmtime.Arch)-%(Wasmtime.OS)-c-api/lib/%(Wasmtime.LibraryFilename)">
        <PackagePath>runtimes/%(Wasmtime.RID)/native/%(Wasmtime.LibraryFilename)</PackagePath>
      </Content>
    </ItemGroup>
  </Target>

   <Target Name="CopyWasmtimeLibrary" BeforeTargets="BeforeBuild">
    <ItemGroup>
      <Content Condition="'%(Wasmtime.Copy)'=='true'" Include="$(BaseIntermediateOutputPath)$(ReleaseFileNameBase)-%(Wasmtime.Arch)-%(Wasmtime.OS)-c-api/lib/%(Wasmtime.LibraryFilename)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <Link>%(Wasmtime.LibraryFilename)</Link>
      </Content>
    </ItemGroup>
  </Target>

</Project>
