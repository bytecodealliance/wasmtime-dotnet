<#
// This file contains the functions used in Function.FromCallback.ts and Linker.DefineFunction.ts
// in order to generate overloads with different parameter and result types for Action<...>/Func<...>.

// Suppress the "not used" warning when this file is referenced but the function is not called.
#pragma warning disable CS8321 // Local function is declared but never used
void GenerateCallbackContent(bool hasCaller, int resultCount, int parameterCount, bool storeAvailable) {
#pragma warning restore CS8321 // Local function is declared but never used
#>
                    try
                    {
                        <# if (storeAvailable && !hasCaller)
                        {
                            #>var storeContext = store.Context;<#
                        }
                        else
                        {
                            #>var caller = new Caller(callerPtr);
                        var storeContext = caller.context;
                        var store = caller.store;
<#
                        }
                        #>

                        <#= resultCount > 0 ? "var result = " : "" #>callback(
                            <#
    if (hasCaller)
    {
        #>caller<#

        if (parameterCount > 0)
        {
            #>,
                            <#
        }
    }

    // Generate code for passing the parameters.
    for (int i = 0; i < parameterCount; i++)
    {
        string genericType = "T";
        if (parameterCount > 1)
        {
            genericType += (i + 1).ToString(CultureInfo.InvariantCulture);
        }

        #>conv<#= genericType #>.Unbox(storeContext, store, args_and_results[<#= i.ToString(CultureInfo.InvariantCulture) #>])<#

        if (i + 1 < parameterCount)
        {
        #>,
                            <#
        }
    }
    #>);

                        <#
    // Generate code for assigning the results.
    for (int i = 0; i < resultCount; i++)
    {
        string genericType = "TResult";
        if (resultCount > 1)
        {
            genericType += (i + 1).ToString(CultureInfo.InvariantCulture);
        }

        string tupleAccessor = "";
        if (resultCount > 1)
        {
            tupleAccessor = ".Item" + (i + 1).ToString(CultureInfo.InvariantCulture);
        }

        #>conv<#= genericType #>.Box(storeContext, store, ref args_and_results[<#= i.ToString(CultureInfo.InvariantCulture) #>], result<#= tupleAccessor #>);
                        <#
    }
    #>

                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
<#
}

IEnumerable<(
    bool hasCaller,
    int resultCount,
    int parameterCount,
    string methodGenerics,
    string delegateType,
    string callbackParameterTypes,
    string callbackReturnType,
    string parameterConverters,
    string resultConverters
)> EnumerateTypeCombinations(int maxParameterCount = 12, int maxResultCount = 4, bool canHaveCaller = true, bool delegateInputsNullable = true) {
    foreach (var hasCaller in canHaveCaller ? new[] { false, true } : new[] { false })
    {
        for (int resultCount = 0; resultCount <= maxResultCount; resultCount++)
        {
            for (int parameterCount = 0; parameterCount <= maxParameterCount; parameterCount++)
            {
                var methodGenerics = new StringBuilder();
                var delegateReturnType = new StringBuilder();
                var parameterConverters = new StringBuilder();
                var resultConverters = new StringBuilder();
        
                var delegateType = new StringBuilder(hasCaller ? "Caller" : "");
                delegateType.Append(resultCount == 0 ? "Action" : "Func");

                if (parameterCount > 0 || resultCount > 0)
                {
                    methodGenerics.Append('<');
                }

                if (parameterCount > 0 || resultCount > 0)
                {
                    delegateType.Append('<');
                }

                for (int x = 0; x < parameterCount; x++)
                {
                    if (x > 0)
                    {
                        methodGenerics.Append(", ");
                        delegateType.Append(", ");
                    }

                    string genericType = "T";
                    if (parameterCount > 1)
                    {
                        genericType += (x + 1).ToString(CultureInfo.InvariantCulture);
                    }

                    methodGenerics.Append(genericType);
                    delegateType.Append(genericType);

                    if (delegateInputsNullable)
                    {
                        delegateType.Append('?');
                    }

                    parameterConverters.AppendLine($"            var conv{genericType} = ValueRaw.Converter<{genericType}>();");
                }

                if (parameterCount > 0 && resultCount > 0)
                {
                    methodGenerics.Append(", ");
                    delegateType.Append(", ");
                }

                if (resultCount > 1)
                {
                    delegateReturnType.Append("ValueTuple<");
                }

                for (int x = 0; x < resultCount; x++)
                {
                    if (x > 0)
                    {
                        methodGenerics.Append(", ");
                        delegateReturnType.Append(", ");
                    }

                    string genericType = "TResult";
                    if (resultCount > 1)
                    {
                        genericType += (x + 1).ToString(CultureInfo.InvariantCulture);
                    }

                    methodGenerics.Append(genericType);
                    delegateReturnType.Append(genericType);

                    resultConverters.AppendLine($"            var conv{genericType} = ValueRaw.Converter<{genericType}>();");
                }

                if (resultCount > 1)
                {
                    delegateReturnType.Append(">");
                }

                delegateType.Append(delegateReturnType);

                if (!delegateInputsNullable && resultCount > 0)
                {
                    delegateType.Append('?');
                }

                if (parameterCount > 0 || resultCount > 0)
                {
                    methodGenerics.Append('>');
                }

                if (parameterCount > 0 || resultCount > 0)
                {
                    delegateType.Append(">");
                }

                // Generate the "typeof(...)" clauses for the callback parameters.
                var callbackParameterTypeExpressions = new StringBuilder();
                if (hasCaller)
                {
                    callbackParameterTypeExpressions.Append("typeof(Caller), ");
                }

                for (int i = 0; i < parameterCount; i++)
                {
                    callbackParameterTypeExpressions.Append($"typeof(T{(parameterCount > 1 ? (i + 1).ToString(CultureInfo.InvariantCulture) : "")}), ");
                }

                string callbackReturnTypeExpression;
                if (resultCount == 0)
                {
                    callbackReturnTypeExpression = "default(Type)";
                }
                else
                {
                    callbackReturnTypeExpression = $"typeof({delegateReturnType})";
                }

                yield return (
                    hasCaller,
                    resultCount,
                    parameterCount,
                    methodGenerics.ToString(),
                    delegateType.ToString(),
                    callbackParameterTypeExpressions.ToString(),
                    callbackReturnTypeExpression,
                    parameterConverters.ToString(),
                    resultConverters.ToString()
                );
            }
        }
    }
}
#>