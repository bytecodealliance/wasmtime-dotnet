<#
// This file contains the functions used in Function.FromCallback.ts and Linker.DefineFunction.ts
// in order to generate overloads with different parameter and result types for Action<...>/Func<...>.

void GenerateCallbackContent(bool hasCaller, int resultCount, int parameterCount) {
#>
                    try
                    {
                        var storeContext = new StoreContext(Caller.Native.wasmtime_caller_context(callerPtr));
                        using var caller = <#= hasCaller ? "" : "!converterRequiresStore ? null : " #>new Caller(callerPtr);

                        <#= resultCount > 0 ? "var result = " : "" #>callback(
                            <#
    if (hasCaller)
    {
        #>caller<#

        if (parameterCount > 0)
        {
            #>,
                            <#
        }
    }

    // Generate code for passing the parameters.
    for (int i = 0; i < parameterCount; i++)
    {
        string genericType = "T";
        if (parameterCount > 1)
        {
            genericType += (i + 1).ToString(CultureInfo.InvariantCulture);
        }

        #>conv<#= genericType #>.Unbox(storeContext, caller, args_and_results[<#= i.ToString(CultureInfo.InvariantCulture) #>])<#

        if (i + 1 < parameterCount)
        {
        #>,
                            <#
        }
    }
    #>);

                        <#
    // Generate code for assigning the results.
    for (int i = 0; i < resultCount; i++)
    {
        string genericType = "TResult";
        if (resultCount > 1)
        {
            genericType += (i + 1).ToString(CultureInfo.InvariantCulture);
        }

        string tupleAccessor = "";
        if (resultCount > 1)
        {
            tupleAccessor = ".Item" + (i + 1).ToString(CultureInfo.InvariantCulture);
        }

        #>conv<#= genericType #>.Box(storeContext, caller, ref args_and_results[<#= i.ToString(CultureInfo.InvariantCulture) #>], result<#= tupleAccessor #>);
                        <#
    }
    #>

                        return IntPtr.Zero;
                    }
                    catch (Exception ex)
                    {
                        return Function.HandleCallbackException(ex);
                    }
<#
}

IEnumerable<(
    bool hasCaller,
    int resultCount,
    int parameterCount,
    string methodGenerics,
    string delegateType,
    string callbackParameterTypes,
    string callbackReturnType,
    string parameterConverters
)> EnumerateTypeCombinations() {
    // Generate overloads for different combinations of function parameter count, result count,
    // and hasCaller states.
    // Currently, we generate them for a maximum of 12 parameters and 4 result values, which means there
    // will be 2 * 13 * 5 = 130 overloads of DefineFunction accepting an Action/Func.
    // Note that more than 200 overloads can cause the C# compiler to no longer resolve the overloads
    // correctly (tested with Visual Studio 17.4.0 Preview 2.1).
    // For delegate types not covered by these overloads, we have a method accepting a Delegate which
    // will be called using reflection.
    const int maxParameterCount = 12;
    const int maxResultCount = 4;

    foreach (var hasCaller in new[] { false, true })
    {
        for (int resultCount = 0; resultCount <= maxResultCount; resultCount++)
        {
            for (int parameterCount = 0; parameterCount <= maxParameterCount; parameterCount++)
            {
                var methodGenerics = new StringBuilder();
                var delegateType = new StringBuilder(resultCount == 0 ? "Action" : "Func");
                var delegateReturnType = new StringBuilder();
                var parameterConverters = new StringBuilder();
        
                if (parameterCount > 0 || resultCount > 0)
                {
                    methodGenerics.Append('<');
                }

                if (parameterCount > 0 || resultCount > 0 || hasCaller)
                {
                    delegateType.Append('<');
                }

                if (hasCaller)
                {
                    delegateType.Append("Caller");

                    if (parameterCount + resultCount > 0)
                    {
                        delegateType.Append(", ");
                    }
                }

                for (int x = 0; x < parameterCount; x++)
                {
                    if (x > 0)
                    {
                        methodGenerics.Append(", ");
                        delegateType.Append(", ");
                    }

                    string genericType = "T";
                    if (parameterCount > 1)
                    {
                        genericType += (x + 1).ToString(CultureInfo.InvariantCulture);
                    }

                    methodGenerics.Append(genericType);
                    delegateType.Append(genericType + '?');

                    parameterConverters.AppendLine($"            var conv{genericType} = ValueRaw.Converter<{genericType}>();");
                }

                if (parameterCount > 0 && resultCount > 0)
                {
                    methodGenerics.Append(", ");
                    delegateType.Append(", ");
                }

                if (resultCount > 1)
                {
                    delegateReturnType.Append("ValueTuple<");
                }

                for (int x = 0; x < resultCount; x++)
                {
                    if (x > 0)
                    {
                        methodGenerics.Append(", ");
                        delegateReturnType.Append(", ");
                    }

                    string genericType = "TResult";
                    if (resultCount > 1)
                    {
                        genericType += (x + 1).ToString(CultureInfo.InvariantCulture);
                    }

                    methodGenerics.Append(genericType);
                    delegateReturnType.Append(genericType);

                    parameterConverters.AppendLine($"            var conv{genericType} = ValueRaw.Converter<{genericType}>();");
                }

                if (resultCount > 1)
                {
                    delegateReturnType.Append(">");
                }

                delegateType.Append(delegateReturnType);

                if (parameterCount > 0 || resultCount > 0)
                {
                    methodGenerics.Append('>');
                }

                if (parameterCount > 0 || resultCount > 0 || hasCaller)
                {
                    delegateType.Append(">");
                }

                // Generate the "typeof(...)" clauses for the callback parameters.
                var callbackParameterTypeExpressions = new StringBuilder();
                if (hasCaller)
                {
                    callbackParameterTypeExpressions.Append("typeof(Caller), ");
                }

                for (int i = 0; i < parameterCount; i++)
                {
                    callbackParameterTypeExpressions.Append($"typeof(T{(parameterCount > 1 ? (i + 1).ToString(CultureInfo.InvariantCulture) : "")}), ");
                }

                string callbackReturnTypeExpression;
                if (resultCount == 0)
                {
                    callbackReturnTypeExpression = "default(Type)";
                }
                else
                {
                    callbackReturnTypeExpression = $"typeof({delegateReturnType})";
                }

                // Generate a bool value that specifies whether any of the converters needs the IStore.
                if (!hasCaller)
                {
                    parameterConverters.AppendLine();
                    parameterConverters.AppendLine($"            var converterRequiresStore =");

                    for (int x = 0; x < parameterCount; x++)
                    {
                        string genericType = "T";
                        if (parameterCount > 1)
                        {
                            genericType += (x + 1).ToString(CultureInfo.InvariantCulture);
                        }

                        parameterConverters.AppendLine($"                conv{genericType}.RequiresStore(forBoxing: false) ||");
                    }

                    for (int x = 0; x < resultCount; x++)
                    {
                        string genericType = "TResult";
                        if (resultCount > 1)
                        {
                            genericType += (x + 1).ToString(CultureInfo.InvariantCulture);
                        }

                        parameterConverters.AppendLine($"                conv{genericType}.RequiresStore(forBoxing: true) ||");
                    }

                    parameterConverters.AppendLine($"                false;");
                }
                
                yield return (
                    hasCaller,
                    resultCount,
                    parameterCount,
                    methodGenerics.ToString(),
                    delegateType.ToString(),
                    callbackParameterTypeExpressions.ToString(),
                    callbackReturnTypeExpression,
                    parameterConverters.ToString()
                );
            }
        }
    }
}
#>